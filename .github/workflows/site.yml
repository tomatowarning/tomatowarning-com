on:
  push:
    branches:
      - develop
      - staging
      - main
    paths:
      - 'src/**'
      - 'public/**'
      - 'yarn.lock'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./
    env:
      TF_IN_AUTOMATION: false
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2.3.4

      - name: Branch Name From Push
        id: branch-merge
        if: github.event_name == 'push'
        run: echo "branch=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Branch Name From PR
        id: branch-pr
        if: github.event_name == 'pull_request'
        run: echo "branch=${{github.event.pull_request.base.ref}}" >> $GITHUB_ENV

      - name: Branch Name Case Transformation
        id: branch
        uses: ASzc/change-string-case-action@v1
        with:
          string: ${{ env.branch }}

      - name: Set Keys
        id: keys
        run: |
          echo "::set-output name=ROLE_SESSION_NAME::GithubDeploymentTomatoWarningComSite${{steps.branch.outputs.capitalized}}"
          echo "::set-output name=AWS_ACCOUNT_ID::${{secrets[format('AWS_{0}_ACCOUNT',steps.branch.outputs.uppercase)]}}"
          echo "::set-output name=CF_DISTRIBUTION_NAME::${{format('CF_DISTRIBUTION_{0}',steps.branch.outputs.uppercase)}}"
          echo "::set-output name=CF_DISTRIBUTION::${{secrets[format('CF_DISTRIBUTION_{0}',steps.branch.outputs.uppercase)]}}"

      - name: Setup NodeJS
        uses: actions/setup-node@master
        with:
          node-version: '14'

      - name: Run Yarn Install
        run: yarn install

      - name: Run Yarn Build
        id: yarn-build
        run: yarn build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.6.0
        with:
          role-to-assume: arn:aws:iam::${{steps.keys.outputs.AWS_ACCOUNT_ID}}:role/GithubDeploymentRole
          role-session-name: ${{steps.keys.outputs.ROLE_SESSION_NAME}}
          aws-region: us-east-2

      - name: s3 Sync Web Primary on Push
        id: s3_sync_primary
        if: github.event_name == 'push'
        run: |
          aws s3 sync ./dist s3://${{ github.event.repository.name }}-${{ steps.branch.outputs.lowercase }}-web-primary --acl public-read --delete --cache-control 'max-age=3600'

      - name: s3 Sync Web Secondary on Push
        id: s3_sync_secondary
        if: github.event_name == 'push'
        run: |
          aws s3 sync ./dist s3://${{ github.event.repository.name }}-${{ steps.branch.outputs.lowercase }}-web-secondary --acl public-read --delete --cache-control 'max-age=3600'

      # If a cloudfront distribution key is defined, let's invalidate /* and refresh the cache.

      - name: Invalidate Distribution Path on Push
        if: github.event_name == 'push' && "${{steps.keys.outputs.CF_DISTRIBUTION_NAME}}" != ""
        run: aws cloudfront create-invalidation --distribution-id="${{secrets[steps.keys.outputs.CF_DISTRIBUTION_NAME]}}" --paths="/*"

